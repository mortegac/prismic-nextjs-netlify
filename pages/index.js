import React, {useState, useEffect} from'react';
import Head from 'next/head'
import { SliceZone } from "@prismicio/react";
import Image from 'next/image'
import { createClient } from "../prismicio";
import { components } from "../slices/index";

import styles from '../styles/Home.module.css'

export default function Home({pages, time}) {
  const [showChild, setShowChild] = useState(false);
  useEffect(() => {
    setShowChild(true);
  }, []);

  if (!showChild) {
    return null;
  }


  // console.log('--pages--', pages)
  // Evita el problema de rehidratación de los componentes de slices
  if (typeof window === 'undefined') {
    return <></>;
  } else {
    return (
      <div className={styles.container}>
        <Head>
          <title>Nextjs - Prismic</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <h1 className={styles.title}>
            Uso de <a href="https://nextjs.org">Next.js!</a> y <a href="https://prismic.io">Prismic!</a>
          </h1>
          <h3>{time}</h3>

          <div className={styles.grid}>
            <SliceZone slices={pages?.data?.slices || null} components={components} />
          </div>
        </main>

        <footer className={styles.footer}>
          <a
            href="#"
            target="_blank"
            rel="noopener noreferrer"
          >
            Powered by{' '}
            <span className={styles.logo}>Dev</span>
          </a>
        </footer>
      </div>
    )
}
}


export async function getStaticProps(context) {
  const client = await createClient({ context });
  const pages = await client.getSingle("pages");
  // const header = await client.getSingle("Header");
  // const footer = await client.getSingle("footer");
  console.log('--pages--', pages)
  return {
    props: {
      time: new Date().toISOString(),
      pages,
    },
    revalidate: 60,  //cantidad de tiempo que debe reconstruir las páginas.
    // fallback: true
  };
}